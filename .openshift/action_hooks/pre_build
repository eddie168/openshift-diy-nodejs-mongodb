#!/bin/bash
# This is a simple script and will be executed on your CI system if 
# available.  Otherwise it will execute while your application is stopped
# before the build step.  This script gets executed directly, so it
# could be python, php, ruby, etc.

# Will need around 200MB free disk space
cd ${OPENSHIFT_REPO_DIR}
NODE_VERSION=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.nodejs.version)'`
REMOVE_OLD=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.nodejs.removeOld)'`

MONGODB_VERSION=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.mongodb.version)'`
MONGODB_PORT=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.mongodb.port)'`
MONGODB_REMOVE_OLD=`node -e 'var config_diy=require("./config_diy");console.log(config_diy.mongodb.removeOld)'`

# Prepare Node.js
if [ ! -e ${OPENSHIFT_DATA_DIR}node-${NODE_VERSION}/bin/node ]; then
  # Delete previous version
  if [ $REMOVE_OLD == "true" ]; then
    echo "rm -rf ${OPENSHIFT_DATA_DIR}node-*"
    rm -rf ${OPENSHIFT_DATA_DIR}node-*
  fi
  cd ${OPENSHIFT_TMP_DIR}
  # Determine hardware type for pre-compiled linux binary
  if [ "`uname -i`" == "x86_64" ]; then
    TYPE="x64"
  else
    TYPE="x86"
  fi
  BINARY="http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-$TYPE.tar.gz"
  # Check pre-compiled linux binary
  if [ "`curl -Is $BINARY | grep '200 OK'`" != '' ]; then
    curl -L -o node-${NODE_VERSION}-linux-${TYPE}.tar.gz $BINARY
    tar -xvzf node-${NODE_VERSION}-linux-${TYPE}.tar.gz
    mv node-${NODE_VERSION}-linux-${TYPE} ${OPENSHIFT_DATA_DIR}node-${NODE_VERSION}
    rm -f node-${NODE_VERSION}-linux-${TYPE}.tar.gz
  else
    # Don't have pre-compiled binary, compile from source. Determine tarball url
    tarball=''
    if [ "`curl -Is "http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION.tar.gz" | grep '200 OK'`" != '' ]; then
      tarball="http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION.tar.gz"
    elif [ "`curl -Is "http://nodejs.org/dist/node-$NODE_VERSION.tar.gz" | grep '200 OK'`" != '' ]; then
      tarball="http://nodejs.org/dist/node-$NODE_VERSION.tar.gz"
    fi
    # Check is tarball already download and extracted
    if [ ! -d node-${NODE_VERSION} ]; then
      curl -L -o node-${NODE_VERSION}.tar.gz $tarball
      tar -xvzf node-${NODE_VERSION}.tar.gz
    fi
    cd node-${NODE_VERSION}
    echo "Start compiling Node ${NODE_VERSION} on Openshift (it'll take a while)"
    ./configure --prefix="${OPENSHIFT_DATA_DIR}node-${NODE_VERSION}" && make && make install
    # Assume it works, delete the tarball and source codes
    # because files in /tmp still counted into the disk quota
    cd ${OPENSHIFT_TMP_DIR}
    rm -f node-${NODE_VERSION}.tar.gz
    rm -rf node-${NODE_VERSION}/
  fi
fi

# Determine hardware type for pre-compiled linux binary
if [ "`uname -i`" == "x86_64" ]; then
  MONGODB_TYPE="x86_64"
else
  MONGODB_TYPE="i686"
fi

# Prepare Mongodb
if [ ! -e ${OPENSHIFT_DATA_DIR}mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION}/bin/mongod ]; then
  # Delete previous version
  if [ $MONGODB_REMOVE_OLD == "true" ]; then
    echo "rm -rf ${OPENSHIFT_DATA_DIR}mongodb-*"
    rm -rf ${OPENSHIFT_DATA_DIR}mongodb-*
  fi
  cd ${OPENSHIFT_TMP_DIR}
  tarball=''
  if [ "`curl -Is "http://fastdl.mongodb.org/linux/mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION}.tgz" | grep '200 OK'`" != '' ]; then
    tarball="http://fastdl.mongodb.org/linux/mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION}.tgz"
  else
    echo "#### http://fastdl.mongodb.org/linux/mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION}.tgz not exist."
    echo "#### Change mongodb.verion to *2.4.4*"
    MONGODB_VERSION="2.4.4"
    tarball="http://fastdl.mongodb.org/linux/mongodb-linux-${MONGODB_TYPE}-2.4.4.tgz"
  fi
  
  # Download Mongodb
  if [ ! -d mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION} ]; then
    curl -L -o mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION}.tgz $tarball
    tar -xvzf mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION}.tgz
  fi

  # Finalize Mongodb
  mv mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION} ${OPENSHIFT_DATA_DIR}mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION}
  rm -f mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION}.tgz
  mkdir -p ${OPENSHIFT_DATA_DIR}mongodb/data/
  mkdir -p ${OPENSHIFT_DATA_DIR}mongodb/pid/
fi

# Create mongod.conf
cat <<EOF > ${OPENSHIFT_DATA_DIR}mongodb.conf
# mongodb.conf

#where to log
logpath=${OPENSHIFT_DIY_LOG_DIR}mongodb.log

# fork and run in background
fork = true

bind_ip = ${OPENSHIFT_DIY_IP}
port = ${MONGODB_PORT}

dbpath=${OPENSHIFT_DATA_DIR}mongodb/data/

pidfilepath=${OPENSHIFT_DATA_DIR}mongodb/pid/mongodb.pid

# Enables periodic logging of CPU utilization and I/O wait
#cpu = false

# Disable the HTTP interface (Defaults to localhost:27018).
nohttpinterface = true

# Disable journal to save disk space
nojournal = true

# Disable data file preallocation.
noprealloc = true
EOF

# Create a shell script to start mongo shell
cat <<EOF > ${OPENSHIFT_DATA_DIR}/mongo_shell.sh
${OPENSHIFT_DATA_DIR}mongodb-linux-${MONGODB_TYPE}-${MONGODB_VERSION}/bin/mongo --host ${OPENSHIFT_DIY_IP} --port ${MONGODB_PORT}
EOF
chmod +x ${OPENSHIFT_DATA_DIR}/mongo_shell.sh

# Create environment variables for this version
cat <<EOF > ${OPENSHIFT_DATA_DIR}/node.sh
export NODE_VERSION=${NODE_VERSION}
export MONGODB_VERSION=${MONGODB_VERSION}
export MONGODB_TYPE=${MONGODB_TYPE}
export MONGODB_PORT=${MONGODB_PORT}
export MONGODB_URL=mongodb://${OPENSHIFT_DIY_IP}:${MONGODB_PORT}/
export TMPDIR=\${OPENSHIFT_TMP_DIR}
if [ -z \$NODE_DEFINED ]; then
  export NODE_DEFINED=1
  export PATH="\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/bin:\${OPENSHIFT_DATA_DIR}mongodb-linux-\${MONGODB_TYPE}-\${MONGODB_VERSION}/bin:\${OPENSHIFT_DATA_DIR}:\$PATH"
  export npm_config_cache=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npm
  export npm_config_userconfig=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npmrc
  export npm_config_userignorefile=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npmignore
  export npm_config_tmp=\${OPENSHIFT_TMP_DIR}
  export npm_config_init_module=\${OPENSHIFT_DATA_DIR}node-\${NODE_VERSION}/.npm-init.js
  export NODE_ENV=production
fi
EOF
chmod +x ${OPENSHIFT_DATA_DIR}node.sh

